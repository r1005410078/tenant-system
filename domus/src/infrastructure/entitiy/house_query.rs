//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::infrastructure::entitiy::{community_query, owner_query};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "house_query")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub community_id: String,
    pub owner_id: Option<String>,
    pub title: Option<String>,
    pub purpose: String,
    pub transaction_type: String,
    pub house_status: String,
    pub door_number_from: Option<i32>,
    pub door_number_to: Option<i32>,
    pub building_number: Option<i32>,
    pub unit_number: Option<i32>,
    pub door_number: Option<i32>,
    pub current_floor: Option<i32>,
    pub room: Option<i32>,
    pub hall: Option<i32>,
    pub bathroom: Option<i32>,
    pub kitchen: Option<i32>,
    pub terrace: Option<i32>,
    pub balcony: Option<i32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub building_area: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub use_area: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub floor_height: Option<f32>,
    pub house_decoration: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub sale_price: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rent_price: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rent_low_price: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub sale_low_price: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub down_payment: Option<f64>,
    pub house_type: Option<String>,
    pub house_orientation: Option<String>,
    pub building_structure: Option<String>,
    pub building_year: Option<i32>,
    pub property_rights: Option<String>,
    pub property_year_limit: Option<String>,
    pub certificate_date: Option<String>,
    pub handover_date: Option<String>,
    pub tags: Option<Json>,
    #[sea_orm(column_type = "Double", nullable)]
    pub car_height: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub actual_rate: Option<f64>,
    pub level: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub progress_depth: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub door_width: Option<f64>,
    pub discount_year_limit: Option<String>,
    pub stairs: Option<String>,
    pub rooms: Option<String>,
    pub view_method: Option<String>,
    pub payment_method: Option<String>,
    pub property_tax: Option<String>,
    pub degree: Option<String>,
    pub household: Option<String>,
    pub source: Option<String>,
    pub delegate_number: Option<String>,
    pub unique_housing: Option<String>,
    pub full_payment: Option<String>,
    pub mortgage: Option<String>,
    pub urgent: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub support: Option<String>,
    pub present_state: Option<String>,
    pub external_sync: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub remark: Option<String>,
    pub images: Option<Json>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    CommunityQuery,
    OwnerQuery,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::CommunityQuery => Entity::belongs_to(community_query::Entity)
                .from(Column::CommunityId)
                .to(community_query::Column::Id)
                .into(),
            Self::OwnerQuery => Entity::belongs_to(owner_query::Entity)
                .from(Column::OwnerId)
                .to(owner_query::Column::Id)
                .into(),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
